(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{578:function(t,a,_){"use strict";_.r(a);var s=_(16),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"tcp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),_("h2",{attrs:{id:"_1、什么是tcp网络分层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是tcp网络分层"}},[t._v("#")]),t._v(" 1、什么是TCP网络分层")]),t._v(" "),_("blockquote",[_("p",[t._v("应用层(数据包)-> 传输层(TCP头部，端口，序列号等) -> 网络层(IP头部，IP地址) -> 数据链路层(MAC地址)->物理层")])]),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_36.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_37.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_2、tcp的三次握手为什么是3次"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、tcp的三次握手为什么是3次"}},[t._v("#")]),t._v(" 2、TCP的三次握手为什么是3次")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_38.png"),alt:"foo"}}),t._v("\n从最开始双方都处于CLOSED状态。然后服务端开始监听某个端口，进入了LISTEN状态。\n"),_("ul",[_("li",[t._v("1、然后客户端主动发起连接，发送 SYN , 自己变成了SYN-SENT状态")]),t._v(" "),_("li",[t._v("2、服务端接收到，返回SYN和ACK(对应客户端发来的SYN)，自己变成了SYN-REVD。")]),t._v(" "),_("li",[t._v("3、之后客户端再发送ACK给服务端，自己变成了ESTABLISHED状态；服务端收到ACK之后，也变成了ESTABLISHED状态。")])]),t._v(" "),_("p",[_("strong",[t._v("为什么不是两次")])]),t._v(" "),_("ul",[_("li",[t._v("因为无法确认客户端的接收能力")])]),t._v(" "),_("p",[_("strong",[t._v("为什么不是四次")])]),t._v(" "),_("ul",[_("li",[t._v("三次握手的目的是确认双方发送和接收的能力，三次足够")])]),t._v(" "),_("h2",{attrs:{id:"_3、-四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、-四次挥手"}},[t._v("#")]),t._v(" 3、 四次挥手")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_39.png"),alt:"foo"}}),t._v("\n刚开始双方处于ESTABLISHED状态\n- 客户端要断开了，向服务器发送 FIN 报文，发送后客户端变成了FIN-WAIT-1状态。注意, 这时候客户端同时也变成了half-close(半关闭)状态，即无法向服务端发送报文，只能接收。\n- 服务端接收后向客户端确认，变成了CLOSED-WAIT状态。\n- 客户端接收到了服务端的确认，变成了FIN-WAIT2状态。\n- 随后，服务端向客户端发送FIN，自己进入LAST-ACK状态，\n- 客户端收到服务端发来的FIN后，自己变成了TIME-WAIT状态，然后发送 ACK 给服务端。\n"),_("p",[_("strong",[t._v("为什么是四次挥手而不是三次？")])]),t._v(" "),_("ul",[_("li",[t._v("因为服务端在接收到FIN, 往往不会立即返回FIN, 必须等到服务端所有的报文都发送完毕了，才能发FIN。因此先发一个ACK表示已经收到客户端的FIN，延迟一段时间才发FIN。这就造成了四次挥手。")])]),t._v(" "),_("p",[t._v("如果是三次挥手会有什么问题？")]),t._v(" "),_("p",[t._v("等于说服务端将ACK和FIN的发送合并为一次挥手，这个时候长时间的延迟可能会导致客户端误以为FIN没有到达客户端，从而让客户端不断的重发FIN。")]),t._v(" "),_("h2",{attrs:{id:"_4、-为什么syn-fin-不包含数据却要消耗一个序列号"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、-为什么syn-fin-不包含数据却要消耗一个序列号"}},[t._v("#")]),t._v(" 4、 为什么SYN/FIN 不包含数据却要消耗一个序列号")]),t._v(" "),_("blockquote",[_("p",[t._v("凡是需要对端确认的，一定消耗TCP报文的序列号。\n"),_("img",{attrs:{src:t.$withBase("/img_40.png"),alt:"foo"}})])]),t._v(" "),_("h2",{attrs:{id:"_5、-什么是半连接队列-什么是syn-flood攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、-什么是半连接队列-什么是syn-flood攻击"}},[t._v("#")]),t._v(" 5、 什么是半连接队列？什么是SYN Flood攻击？")]),t._v(" "),_("ul",[_("li",[t._v("半连接队列\n"),_("ul",[_("li",[t._v("当客户端发送SYN到服务端，服务端收到以后回复ACK和SYN，状态由LISTEN变为SYN_RCVD，此时这个连接就被推入了SYN队列，也就是半连接队列。")])])]),t._v(" "),_("li",[t._v("全连接队列\n"),_("ul",[_("li",[t._v("当客户端返回ACK, 服务端接收后，三次握手完成。这个时候连接等待被具体的应用取走，在被取走之前，它会被推入另外一个 TCP 维护的队列，也就是全连接队列(Accept Queue)。")])])])]),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_41.png"),alt:"foo"}}),t._v(" "),_("ul",[_("li",[t._v("如何应对 SYN Flood 攻击？\n"),_("ul",[_("li",[t._v("增加 SYN 连接，也就是增加半连接队列的容量。")]),t._v(" "),_("li",[t._v("减少 SYN + ACK 重试次数，避免大量的超时重发。")]),t._v(" "),_("li",[t._v("利用 SYN Cookie 技术，在服务端接收到SYN后不立即分配连接资源，而是根据这个SYN计算出一个Cookie，连同第二次握手回复给客户端，在客户端回复ACK的时候带上这个Cookie值，服务端验证 Cookie 合法之后才分配连接资源。")])])])]),t._v(" "),_("h2",{attrs:{id:"_6、tcp快速打开-tfo-的原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6、tcp快速打开-tfo-的原理"}},[t._v("#")]),t._v(" 6、TCP快速打开(TFO)的原理")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_42.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_43.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_45.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/img_46.png"),alt:"foo"}}),t._v(" "),_("p",[_("strong",[t._v("后面的三次握手")])]),t._v(" "),_("ul",[_("li",[t._v("在后面的三次握手中，客户端会将之前缓存的 Cookie、SYN 和HTTP请求(是的，你没看错)发送给服务端，服务端验证了 Cookie 的合法性，如果不合法直接丢弃；如果是合法的，那么就正常返回SYN + ACK。")]),t._v(" "),_("li",[t._v("重点来了，现在服务端能向客户端发 HTTP 响应了！这是最显著的改变，三次握手还没建立，仅仅验证了 Cookie 的合法性，就可以返回 HTTP 响应了。")])]),t._v(" "),_("p",[_("strong",[t._v("TFO 的优势")])]),t._v(" "),_("ul",[_("li",[t._v("TFO 的优势并不在与首轮三次握手，而在于后面的握手，在拿到客户端的 Cookie 并验证通过以后，可以直接返回 HTTP 响应，充分利用了1 个RTT(Round-Trip Time，往返时延)的时间提前进行数据传输，积累起来还是一个比较大的优势。")])]),t._v(" "),_("h2",{attrs:{id:"tcp发送报文数据时-可能将多个数据包合并成一个大的数据包发送-就有可能发生粘包问题。以下可以用来解决这个问题的是"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp发送报文数据时-可能将多个数据包合并成一个大的数据包发送-就有可能发生粘包问题。以下可以用来解决这个问题的是"}},[t._v("#")]),t._v(" tcp发送报文数据时，可能将多个数据包合并成一个大的数据包发送，就有可能发生粘包问题。以下可以用来解决这个问题的是？")]),t._v(" "),_("p",[t._v("出现粘包，主要是tcp为了提高效率，每次都要等足够长的数据才进行发送，接收方要等到足够长的数据才从缓冲区提取。解决的办法就是只要能把包分开就不影响传输。")]),t._v(" "),_("ul",[_("li",[t._v("发送固定长度的消息")]),t._v(" "),_("li",[t._v("包结尾增加分隔符")]),t._v(" "),_("li",[t._v("把消息分成消息头和消息体，其中消息头上包含长度")]),t._v(" "),_("li",[t._v("慢开始算法和利用滑动窗口实现控制都是网络数据传输时的流量控制，以避免拥塞的发生的算法")])]),t._v(" "),_("h2",{attrs:{id:"进程从运行状态进入就绪状态的原因可能是"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程从运行状态进入就绪状态的原因可能是"}},[t._v("#")]),t._v(" 进程从运行状态进入就绪状态的原因可能是")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_7、tcp报文中的时间戳有什么作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7、tcp报文中的时间戳有什么作用"}},[t._v("#")]),t._v(" 7、TCP报文中的时间戳有什么作用？")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_2.png"),alt:"foo"}}),t._v("\nTCP TimeStamps Options由四部分构成：类别，长度，发送方时间戳，回显时间戳\n"),_("p",[_("strong",[t._v("解决两大问题")])]),t._v(" "),_("ul",[_("li",[t._v("计算往返时延RTT：ACK包括了TSval 和 TSecr，这样无论是正常确认包韩式重传确认包，都可以通过这两个值计算出RTT")]),t._v(" "),_("li",[t._v("防止序列回绕：")])]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_3.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_4.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_8、tcp的超时重传时间是如何计算的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8、tcp的超时重传时间是如何计算的"}},[t._v("#")]),t._v(" 8、TCP的超时重传时间是如何计算的？")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_5.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_6.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_7.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_9、tcp的流量控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9、tcp的流量控制"}},[t._v("#")]),t._v(" 9、TCP的流量控制？")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_8.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_9.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_10、tcp的keep-alive的原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10、tcp的keep-alive的原理"}},[t._v("#")]),t._v(" 10、TCP的keep-alive的原理")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_10.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_11、tcp当中的端口号"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11、tcp当中的端口号"}},[t._v("#")]),t._v(" 11、TCP当中的端口号")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_11.png"),alt:"foo"}}),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_12.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_12、tcp场景问题1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12、tcp场景问题1"}},[t._v("#")]),t._v(" 12、TCP场景问题1")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_13.png"),alt:"foo"}}),t._v("\n500 + 300 + 200\n"),_("h2",{attrs:{id:"_13、tcp场景问题2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13、tcp场景问题2"}},[t._v("#")]),t._v(" 13、TCP场景问题2")]),t._v(" "),_("p",[t._v("收到IP数据包解析以后，它怎么知道这个分组应该投递到上层的哪一个协议\n"),_("img",{attrs:{src:t.$withBase("/TCP/img_14.png"),alt:"foo"}})]),t._v(" "),_("h2",{attrs:{id:"_14、tcp场景问题3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_14、tcp场景问题3"}},[t._v("#")]),t._v(" 14、TCP场景问题3")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_15.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_15、telnet使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15、telnet使用"}},[t._v("#")]),t._v(" 15、telnet使用")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_16.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_16、netstat的用法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_16、netstat的用法"}},[t._v("#")]),t._v(" 16、netstat的用法")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_17.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_17、tcpdump用法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_17、tcpdump用法"}},[t._v("#")]),t._v(" 17、tcpdump用法")]),t._v(" "),_("p",[t._v("tcpdump则是一个命令行的网络流量分析工具，功能非常强大，一般我们用来抓TCP的包")]),t._v(" "),_("h2",{attrs:{id:"_19、tcp和udp的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_19、tcp和udp的区别"}},[t._v("#")]),t._v(" 19、TCP和UDP的区别")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_18.png"),alt:"foo"}}),t._v(" "),_("h2",{attrs:{id:"_20、设计qq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_20、设计qq"}},[t._v("#")]),t._v(" 20、设计QQ？")]),t._v(" "),_("img",{attrs:{src:t.$withBase("/TCP/img_19.png"),alt:"foo"}})])}),[],!1,null,null,null);a.default=r.exports}}]);